package View;

import Controller.PetsXML_Controller;
import Controller.Settings_Controller;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Base64;
import java.util.Vector;

import static Controller.Image_Controller.*;
import static Controller.PetsXML_Controller.loadPets;

public class CustomerDashboardView extends javax.swing.JFrame {
    private static String serverAddress;
    private static int serverPort;
    // For Image
    private String selectedImagePath;
    private JLabel userImage;
    // For Displaying Name
    private static String username;
    private static String role;


    private static int id;
    private static String breed;
    private static String type;
    private static int age;
    private static String healthStatus;
    private static String adoptionStatus;
    private static Object image;
    private static String imageBase64;
    private Vector<Vector<Object>> allPetsData;
    /**
     * Creates new form CustomerDashboardView
     */
    public CustomerDashboardView(String username, int id, String breed, String type, int age, String healthStatus, Object image, String serverAddress, int serverPort) {
        this.username = username;
        this.serverAddress = serverAddress;
        this.serverPort = serverPort;
        this.image = image;
        this.id = id;
        this.healthStatus = healthStatus;
        this.breed = breed;
        this.type = type;
        this.age = age;



        userImage = new JLabel();
        userImage.setBounds(30, 1, 150, 150);
        add(userImage);
        loadImage(username,userImage);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        refresh_Button = new javax.swing.JButton();
        petAutoPic = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        profilePicButton = new javax.swing.JButton();
        user_picture_Label = new javax.swing.JLabel();
        searchField = new java.awt.TextField();
        adoption_History_Button = new javax.swing.JButton();
        settings_Button = new javax.swing.JButton();
        admin_Label = new javax.swing.JLabel();
        name_Label = new javax.swing.JLabel();
        comboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        refresh_Button.setText("Refresh");
        refresh_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_ButtonActionPerformed(evt);
            }
        });

        petAutoPic.setBorder(javax.swing.BorderFactory.createMatteBorder(10, 10, 10, 10, new java.awt.Color(0, 255, 255)));
        jTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        tableModel = new DefaultTableModel(
                new Object [][] {},
                new String [] {"ID", "Type", "Breed", "Adoption Status","Age", "Health Status"}) {

            public boolean isCellEditable (int row, int column) {
                return false;
            }
        };
        jTable = new JTable(tableModel);

        new Thread(() -> {
            try {
                Socket socket = new Socket(serverAddress, serverPort);
                PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                writer.println("load-pets");
                writer.flush();
                Thread.sleep(100);

                Vector<Vector<Object>> petsData = new Vector<>();
                Vector<Object> currentRow = new Vector<>();

                String line;
                while ((line = reader.readLine()) != null) {
                    if ("end".equalsIgnoreCase(line)) {
                        break;
                    }
                    currentRow.add(line);
                    if (currentRow.size() == 6) {
                        petsData.add(currentRow);
                        currentRow = new Vector<>();
                    }
                }

                socket.close();

                SwingUtilities.invokeLater(() -> {
                    displayData(petsData);
                });

            } catch (IOException | InterruptedException ex) {
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, "Error loading pet data from server.", "Error", JOptionPane.ERROR_MESSAGE);
                });
                ex.printStackTrace();
            }
        }).start();

        jTable.setRowHeight(50);
        jTable.setShowGrid(true);
        jTable.setShowHorizontalLines(true);
        jTable.setShowVerticalLines(true);
        jTable.setGridColor(Color.black);
        jTable.setBackground(Color.lightGray);
        jTable.getTableHeader().setReorderingAllowed(false);


        jTable.getColumnModel().getColumn(4).setMinWidth(0);
        jTable.getColumnModel().getColumn(4).setMaxWidth(0);
        jTable.getColumnModel().getColumn(4).setWidth(0);

        jTable.getColumnModel().getColumn(5).setMinWidth(0);
        jTable.getColumnModel().getColumn(5).setMaxWidth(0);
        jTable.getColumnModel().getColumn(5).setWidth(0);


        // One Click to Display
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = jTable.getSelectedRow();
                if (selectedRow != -1) {
                    String id = jTable.getValueAt(selectedRow, 0).toString();

                    new Thread(() -> {
                        try {
                            Socket socket = new Socket(serverAddress, serverPort);
                            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
                            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                            writer.println("pet-icon");
                            writer.flush();
                            Thread.sleep(100);

                            writer.println(id);
                            writer.flush();

                            String imageBase64 = reader.readLine();

                            if (imageBase64 != null && !"not-found".equalsIgnoreCase(imageBase64)) {
                                byte[] imageBytes = Base64.getDecoder().decode(imageBase64);

                                ImageIcon icon = new ImageIcon(imageBytes);
                                Image image = icon.getImage();

                                // Scale it ONCE based on label's preferred size


                                Image scaledImage = image.getScaledInstance(160, 100, Image.SCALE_SMOOTH);
                                ImageIcon scaledIcon = new ImageIcon(scaledImage);

                                SwingUtilities.invokeLater(() -> {
                                    petAutoPic.setIcon(scaledIcon);
                                });
                            }else {
                                SwingUtilities.invokeLater(() -> {
                                    petAutoPic.setIcon(null);
                                    JOptionPane.showMessageDialog(null, "Image not found for pet ID: " + id);
                                });
                            }
                            socket.close();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            SwingUtilities.invokeLater(() -> {
                                JOptionPane.showMessageDialog(null, "Error fetching image from server.");
                            });
                        }
                    }).start();
                }
            }
        });

        jTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    JTable target = (JTable) e.getSource();
                    int row = target.getSelectedRow();

                    if (row != -1) {
                        // Table Display
                        String id = target.getValueAt(row, 0).toString();
                        String type = target.getValueAt(row, 1).toString();
                        String breed = target.getValueAt(row, 2).toString();
                        String adoptionStatus = target.getValueAt(row, 3).toString();
                        String age = target.getValueAt(row, 4).toString();
                        String healthStatus = target.getValueAt(row, 5).toString();

                        SwingUtilities.invokeLater(() -> {
                            new Customer_Pet_Profile_View(username, id, breed, type, age, healthStatus, adoptionStatus, image, serverAddress, serverPort)
                                    .setVisible(true);
                        });

                    }
                }
            }
        });
        jScrollPane2.setViewportView(jTable);

        profilePicButton.setBackground(new java.awt.Color(255, 255, 204));
        profilePicButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        profilePicButton.setForeground(new java.awt.Color(0, 0, 51));
        profilePicButton.setText("+");

        profilePicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profilePicButtonActionPerformed(evt);
            }
        });

        user_picture_Label.setBackground(new java.awt.Color(204, 204, 204));
        user_picture_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        user_picture_Label.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 255, 255), new java.awt.Color(204, 255, 255)));

        searchField.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        searchField.setForeground(new java.awt.Color(102, 0, 0));
        searchField.setText("Search");
        final TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(tableModel);
        jTable.setRowSorter(sorter);
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = jTable.getSelectedRow();
                if (selectedRow != -1) {
                    // Assuming 'id' is in the first column (index 0)
                    String id = jTable.getValueAt(selectedRow, 0).toString();
                    petAutoPic.setIcon(PetsXML_Controller.loadPetImage(id));
                }
            }
        });
        searchField.addTextListener(new java.awt.event.TextListener() {
            @Override
            public void textValueChanged(java.awt.event.TextEvent evt) {
                String text = searchField.getText();
                if (text.trim().length() == 0) {
                    sorter.setRowFilter(null);  // Show all rows when search field is empty
                } else {
                    // Create a case-insensitive regex filter.
                    sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + java.util.regex.Pattern.quote(text)));
                }
            }
        });
        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if ("Search".equals(searchField.getText())) {
                    searchField.setText("");
                }
            }
        });

        //----------------------------
        adoption_History_Button.setText("Adoption History");
        adoption_History_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adoption_History_ButtonActionPerformed(evt);
            }
        });

        settings_Button.setText("Settings");
        settings_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settings_ButtonActionPerformed(evt);
            }
        });

        admin_Label.setText("Customer");

        name_Label.setText(username);

        comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Adopted", "Not Adopted"  }));
        comboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                filterPets();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(name_Label)
                                        .addComponent(admin_Label)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(petAutoPic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(user_picture_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(profilePicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(refresh_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(adoption_History_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(116, 116, 116)
                                                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(settings_Button))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGap(26, 26, 26)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(settings_Button)
                                                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(user_picture_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(profilePicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(8, 8, 8)
                                                .addComponent(admin_Label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(name_Label)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(petAutoPic, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(113, 113, 113)
                                                .addComponent(refresh_Button)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(adoption_History_Button)
                                                .addGap(29, 29, 29))))
        );

        pack();
    }// </editor-fold>

    private void refresh_ButtonActionPerformed(java.awt.event.ActionEvent evt) {
        CustomerDashboardView customerDashboardView = new CustomerDashboardView(username, id, serverAddress, type, serverPort, healthStatus, image, serverAddress, serverPort);
        customerDashboardView.setVisible(true);
        customerDashboardView.setLocationRelativeTo(null);
        dispose();
    }

    private void profilePicButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String imageBase64 = selectImage(this, user_picture_Label);

        if (imageBase64 != null) {
            // Convert Base64 to image bytes
            byte[] imageBytes = Base64.getDecoder().decode(imageBase64);
            ImageIcon imageIcon = new ImageIcon(new ImageIcon(imageBytes)
                    .getImage().getScaledInstance(200, 200, java.awt.Image.SCALE_SMOOTH));

            // Set the image to the label
            user_picture_Label.setIcon(imageIcon);

            // Save the image to XML
            saveImageToJSON(username, imageBase64);
        }
    }

    private void adoption_History_ButtonActionPerformed(java.awt.event.ActionEvent evt) {
        SwingUtilities.invokeLater(() -> {
            Customer_AdoptionHistory_View customerAdoptionHistoryView = new Customer_AdoptionHistory_View(username,  id, serverAddress, type, age, healthStatus, image,serverPort);
            customerAdoptionHistoryView.setVisible(true);
        });
    }

    private void settings_ButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String username = name_Label.getText(); // Get the username from the label
        String serverAddress = this.serverAddress; // or get from a field / passed parameter
        int serverPort = this.serverPort; // or get from a field / passed parameter

        // Open Settings, passing the username, server address, and server port.
        new Settings_Controller(username, role ,serverAddress, serverPort);
    }

    private void displayData(Vector<Vector<Object>> data) {
        tableModel.setRowCount(0);
        for (Vector<Object> row : data) {
            tableModel.addRow(row);
        }
    }

    private void filterPets() {
        String selectedStatus = (String) comboBox.getSelectedItem();
        tableModel.setRowCount(0);

        for (Vector<Object> row : allPetsData) {
            if (selectedStatus.equals("Default") || row.get(3).equals(selectedStatus)) {
                tableModel.addRow(row);
            }
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerDashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerDashboardView(username, id, breed, type, age, healthStatus, image, serverAddress, serverPort).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private DefaultTableModel tableModel;
    private javax.swing.JLabel admin_Label;
    private javax.swing.JButton adoption_History_Button;
    private javax.swing.JComboBox<String> comboBox;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JLabel name_Label;
    private javax.swing.JLabel petAutoPic;
    private javax.swing.JButton profilePicButton;
    private javax.swing.JButton refresh_Button;
    private java.awt.TextField searchField;
    private javax.swing.JButton settings_Button;
    private javax.swing.JLabel user_picture_Label;
    // End of variables declaration
}
