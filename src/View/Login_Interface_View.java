package View;
import Model.UserDatabase_Model;
import javax.swing.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;



public class Login_Interface_View extends javax.swing.JFrame {

    public static String serverAddress;
    public static int serverPort;

    // Customer and Admin
    private static String breed;
    private static String type;
    private static String image;
    private static int age;
    private static int id;
    private static String healthStatus;
    private static String adoptionStatus;

    /**
     * Creates new form Login_InterfaceView
     */
    public Login_Interface_View(String serverAddress, int serverPort) {
        this.serverAddress = serverAddress;
        this.serverPort = serverPort;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        signUp_Button = new javax.swing.JButton();
        login_Button = new javax.swing.JButton();
        title_Label = new javax.swing.JLabel();
        username_Label = new javax.swing.JLabel();
        password_Label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 204, 255));
        setForeground(new java.awt.Color(204, 255, 255));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 204, 204)));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        usernameField.setText("");
        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });

        passwordField.setText("");
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        signUp_Button.setText("Sign up");
        signUp_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUp_ButtonActionPerformed(evt);
            }
        });

        login_Button.setText("Login");
        login_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                login_ButtonActionPerformed(evt);
            }
        });

        title_Label.setFont(new java.awt.Font("Kristen ITC", 0, 12)); // NOI18N
        title_Label.setForeground(new java.awt.Color(0, 0, 255));
        title_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title_Label.setText("Pet Management System ");

        username_Label.setText("Username:");

        password_Label.setText("Password:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(username_Label)
                                        .addComponent(password_Label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(passwordField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(usernameField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(login_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                                                .addComponent(signUp_Button)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(115, Short.MAX_VALUE)
                                .addComponent(title_Label)
                                .addGap(106, 106, 106))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(title_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(username_Label))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(password_Label))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(signUp_Button)
                                        .addComponent(login_Button))
                                .addGap(138, 138, 138))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {
        passwordField.requestFocus();
    }

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {
        String username = usernameField.getText();
        String password = passwordField.getText();

        if (username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter both username and password.", "Login Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String role = UserDatabase_Model.validateUser(username, password);

    }

    private void login_ButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Get input from fields
        String username = usernameField.getText();
        String password = passwordField.getText(); // Use getPassword() for JPasswordField

        // Validate user
        try {

            Socket socket = new Socket(serverAddress, serverPort);
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            writer.println("Login");
            writer.flush();
            Thread.sleep(100);

            writer.println(username);
            writer.flush();
            Thread.sleep(100);

            writer.println(password);
            writer.flush();
            Thread.sleep(100);


            // Wait for server response
            String serverResponse = reader.readLine();


            // Process login success
            if (serverResponse.startsWith("Login successful")) {
                String[] parts = serverResponse.split(", Role: ");
                String role = parts.length > 1 ? parts[1] : "User";

                if (role.equals("Admin")) {
                    SwingUtilities.invokeLater(() -> {
                        // Pass username, serverAddress, and serverPort
                        AdminDashboardView adminDashboardView = new AdminDashboardView(username, id, breed, type, age, healthStatus, image, serverAddress, serverPort);
                        adminDashboardView.setVisible(true);
                        adminDashboardView.setLocationRelativeTo(null);
                    });
                } else {
                    SwingUtilities.invokeLater(() -> {
                        // Similarly, pass the server details for a customer dashboard
                        CustomerDashboardView customerDashboardView = new CustomerDashboardView(username, id, breed, type, age, healthStatus, image, serverAddress, serverPort);
                        customerDashboardView.setVisible(true);
                        customerDashboardView.setLocationRelativeTo(null);
                    });
                }

                this.dispose();
            }


            socket.close();
        } catch (IOException | InterruptedException ex) {
            SwingUtilities.invokeLater(() -> {
                JOptionPane.showMessageDialog(this, "Error connecting to server.", "Error", JOptionPane.ERROR_MESSAGE);
            });
        }
    }

    private void signUp_ButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Create a Sign-Up Dialog
        JDialog signUpDialog = new JDialog(this, "Sign Up", true);
        signUpDialog.getContentPane().setBackground(new Color(55, 234, 234, 192));
        signUpDialog.setSize(400, 300);
        signUpDialog.setLayout(new java.awt.GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new java.awt.Insets(5, 5, 5, 5); // Add spacing
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Custom Font for Labels and Fields
        Font labelFont = new Font("Arial", Font.BOLD, 14);
        Font fieldFont = new Font("Arial", Font.PLAIN, 14);

        // Username Label & Field
        JLabel usernameLabel = new JLabel("Enter Username:");
        usernameLabel.setFont(labelFont);
        JTextField usernameField = new JTextField(15);
        usernameField.setFont(fieldFont);
        usernameField.setBorder(BorderFactory.createLineBorder(Color.GRAY, 2));

        // Password Label & Field
        JLabel passwordLabel = new JLabel("Enter Password:");
        passwordLabel.setFont(labelFont);
        JPasswordField passwordField = new JPasswordField(15);
        passwordField.setFont(fieldFont);
        passwordField.setBorder(BorderFactory.createLineBorder(Color.GRAY, 2));

        // Role Label & Dropdown
        JLabel roleLabel = new JLabel("Select Role:");
        roleLabel.setFont(labelFont);
        String[] roles = {"User", "Admin"}; // Add more roles if needed
        JComboBox<String> roleBox = new JComboBox<>(roles);


        roleBox.setFont(fieldFont);
        roleBox.setBorder(BorderFactory.createLineBorder(Color.GRAY, 2));
        roleBox.addActionListener(e2 -> {
        });

        // Buttons
        JButton signUpButton = new JButton("Sign Up");
        JButton cancelButton = new JButton("Cancel");

        // Customize Buttons
        signUpButton.setBackground(new Color(224, 221, 221, 192));
        signUpButton.setForeground(Color.BLACK);
        signUpButton.setFont(new Font("Arial", Font.BOLD, 14));
        signUpButton.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY, 2));
        signUpButton.setPreferredSize(new Dimension(80,60));

        cancelButton.setBackground(new Color(224, 221, 221, 192));
        cancelButton.setForeground(Color.BLACK);
        cancelButton.setFont(new Font("Arial", Font.BOLD, 14));
        cancelButton.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY, 2));
        cancelButton.setPreferredSize(new Dimension(80,60));

        //Panel for Buttons (FlowLayout)
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 0));
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));

        buttonPanel.setBackground(new Color(55, 234, 234, 192));
        buttonPanel.add(Box.createHorizontalGlue());
        buttonPanel.add(signUpButton);
        buttonPanel.add(Box.createRigidArea(new Dimension(80,0)));
        buttonPanel.add(cancelButton);
        buttonPanel.add(Box.createHorizontalGlue());

        // Add components using GridBagLayout
        gbc.gridx = 0; gbc.gridy = 0; signUpDialog.add(usernameLabel, gbc);
        gbc.gridx = 1; gbc.gridy = 0; signUpDialog.add(usernameField, gbc);
        gbc.gridx = 0; gbc.gridy = 1; signUpDialog.add(passwordLabel, gbc);
        gbc.gridx = 1; gbc.gridy = 1; signUpDialog.add(passwordField, gbc);
        gbc.gridx = 0; gbc.gridy = 2; signUpDialog.add(roleLabel, gbc);
        gbc.gridx = 1; gbc.gridy = 2; signUpDialog.add(roleBox, gbc);
        gbc.gridx = 0; gbc.gridy = 3; gbc.anchor = GridBagConstraints.WEST;


        gbc.gridx = 1; gbc.gridy = 3; gbc.fill = GridBagConstraints.HORIZONTAL;




        gbc.gridx = 0; gbc.gridy = 4; gbc.gridwidth = 2;
        gbc.insets = new Insets(10, 20, 10, 20);
        signUpDialog.add(buttonPanel, gbc);



        // Handle Submit Button Click
        signUpButton.addActionListener(e -> {
            String username = usernameField.getText().trim();
            String password = new String(passwordField.getPassword()).trim();
            String role = (String) roleBox.getSelectedItem();


            // If role is Admin, check the passcode


            if (username.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(signUpDialog, "All fields are required.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Run the network request in a separate thread to prevent UI freezing
            new Thread(() -> {
                try {

                    Socket socket = new Socket(serverAddress, serverPort);
                    PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
                    BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));


                    writer.write("Sign-up\n");
                    writer.flush();
                    Thread.sleep(100); // Prevents merging of messages

                    writer.write(username + "\n");
                    writer.flush();
                    Thread.sleep(100);

                    writer.write(password + "\n");
                    writer.flush();
                    Thread.sleep(100);

                    writer.write(role + "\n");
                    writer.flush();
                    Thread.sleep(100);



// Wait for server response before closing the connection
                    String serverResponse = reader.readLine();


                    // Update UI in Swing thread
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(signUpDialog, serverResponse, "Server Response", JOptionPane.INFORMATION_MESSAGE);
                        if ("User added successfully".equals(serverResponse)) {
                            signUpDialog.dispose();
                        }
                    });

                    socket.close();
                } catch (IOException ex) {
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(signUpDialog, "Error connecting to server.", "Error", JOptionPane.ERROR_MESSAGE);
                    });
                } catch (InterruptedException ex) {
                    throw new RuntimeException(ex);
                }
            }).start(); // Start the background thread
        });


        // Handle Cancel Button Click
        cancelButton.addActionListener(e -> signUpDialog.dispose());

        // Show the Sign-Up Dialog
        signUpDialog.setLocationRelativeTo(this);
        signUpDialog.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login_Interface_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login_Interface_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login_Interface_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login_Interface_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Create the login view and make it visible
                new Login_Interface_View(serverAddress, serverPort).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton login_Button;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel password_Label;
    private javax.swing.JButton signUp_Button;
    private javax.swing.JLabel title_Label;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel username_Label;
    // End of variables declaration
}

