package View;

import Controller.PetsXML_Controller;
import Model.Pet_Model;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.Socket;
import java.nio.file.Files;
import java.util.Base64;

public class Admin_Pet_Profile_View extends javax.swing.JFrame {

    private static String username;
    private static String serverAddress;
    private static int serverPort;
    private static String id;
    private static String breed;
    private static String type;
    private static String age;
    private static String healthStatus;
    private static String adoptionStatus;
    private static Object image;
    private static String currentPetImageBase64;

    /**
     * Creates new form Pet_Profile_View
     */
    public Admin_Pet_Profile_View(String username, String id, String breed, String type, String age,
                                  String healthStatus, String adoptionStatus, Object image, String serverAddress, int serverPort)
    {
        this.username = username;
        this.serverAddress = serverAddress;
        this.serverPort = serverPort;
        this.id = id;
        this.breed = breed;
        this.type = type;
        this.age = age;
        this.healthStatus = healthStatus;
        this.adoptionStatus = adoptionStatus;
        this.image = image;
        currentPetImageBase64 = PetsXML_Controller.getPetImageBase64(id);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        picture_Label = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        id_Label = new javax.swing.JLabel();
        breed_Label = new javax.swing.JLabel();
        type_Label = new javax.swing.JLabel();
        age_Label = new javax.swing.JLabel();
        healthyStatus_Label = new javax.swing.JLabel();
        adoptionStatus_Label = new javax.swing.JLabel();
        displayID_Label = new javax.swing.JLabel();
        displayBreed_Label = new javax.swing.JLabel();
        displayType_Label = new javax.swing.JLabel();
        displayAge_Label = new javax.swing.JLabel();
        displayHealthyStatus_Label = new javax.swing.JLabel();
        displayAdoptionStatus_Label = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        picture_Label.setBackground(new java.awt.Color(204, 204, 204));
        picture_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        picture_Label.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 255, 255), new java.awt.Color(204, 255, 255)));

// Debug: check and load the image
        try (Socket socket = new Socket(serverAddress, serverPort);
             PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {

            writer.println("pet-icon");
            Thread.sleep(50);
            writer.println(id);
            Thread.sleep(50);

            String base64Image = reader.readLine();

            if (base64Image != null && !"not-found".equalsIgnoreCase(base64Image)) {
                // Step 4: Decode the Base64 image string
                byte[] imageBytes = Base64.getDecoder().decode(base64Image);
                ImageIcon icon = new ImageIcon(imageBytes);

                Image scaledImage = icon.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(scaledImage);

                picture_Label.setIcon(scaledIcon);
            } else {
                picture_Label.setIcon(null);
            }

        } catch (IOException | InterruptedException ex) {
            ex.printStackTrace();
        }
        picture_Label.setPreferredSize(new Dimension(200, 200));
        picture_Label.repaint();

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 255), new java.awt.Color(204, 204, 255), new java.awt.Color(51, 153, 255), new java.awt.Color(102, 153, 255)));

        id_Label.setFont(new java.awt.Font("Kristen ITC", 1, 12)); // NOI18N
        id_Label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        id_Label.setText("ID :");

        breed_Label.setFont(new java.awt.Font("Kristen ITC", 1, 12)); // NOI18N
        breed_Label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        breed_Label.setText("TYPE :");

        type_Label.setFont(new java.awt.Font("Kristen ITC", 1, 12)); // NOI18N
        type_Label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        type_Label.setText("BREED :");

        age_Label.setFont(new java.awt.Font("Kristen ITC", 1, 12)); // NOI18N
        age_Label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        age_Label.setText("ADOPTION STATUS :");

        healthyStatus_Label.setFont(new java.awt.Font("Kristen ITC", 1, 12)); // NOI18N
        healthyStatus_Label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        healthyStatus_Label.setText("AGE :");

        adoptionStatus_Label.setFont(new java.awt.Font("Kristen ITC", 1, 12)); // NOI18N
        adoptionStatus_Label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        adoptionStatus_Label.setText("HEALTH STATUS :");

        // Set the display labels using the correct variables
        displayID_Label.setText(id);
        displayBreed_Label.setText(breed);
        displayType_Label.setText(type);
        displayAge_Label.setText(age);
        displayHealthyStatus_Label.setText(healthStatus);
        displayAdoptionStatus_Label.setText(adoptionStatus);


        displayID_Label.setText(id);

        displayBreed_Label.setText(type);

        displayType_Label.setText(breed);

        displayAge_Label.setText(adoptionStatus);

        displayHealthyStatus_Label.setText(age);

        displayAdoptionStatus_Label.setText(healthStatus);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(age_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(type_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(breed_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(id_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(displayBreed_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(displayID_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(displayAge_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(displayType_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(healthyStatus_Label)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(displayHealthyStatus_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                        .addComponent(adoptionStatus_Label)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(displayAdoptionStatus_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(id_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(displayID_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(breed_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(displayBreed_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(type_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(displayType_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(age_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(displayAge_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(healthyStatus_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(displayHealthyStatus_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(adoptionStatus_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(displayAdoptionStatus_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(100, 100, 100))
        );

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });


        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(updateButton))
                                                .addGap(89, 89, 89))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(picture_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(28, 28, 28)))
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backButton)
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(picture_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(159, 159, 159)
                                                .addComponent(updateButton))
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Create a modal update dialog
        JDialog updateDialog = new JDialog(this, "Update Pet Details", true);
        updateDialog.setSize(400, 450); // Increased height for image row
        updateDialog.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;

        // Create editable fields pre-populated with current data from display labels
        JTextField idField = new JTextField(displayID_Label.getText(), 15);
        JTextField breedField = new JTextField(displayBreed_Label.getText(), 15);
        JTextField typeField = new JTextField(displayType_Label.getText(), 15);
        JTextField ageField = new JTextField(displayAge_Label.getText(), 15);

        // Combo boxes for statuses
        String[] healthOptions = {"Healthy", "Not Healthy"};
        JComboBox<String> healthCombo = new JComboBox<>(healthOptions);
        healthCombo.setSelectedItem(displayHealthyStatus_Label.getText());

        String[] adoptionOptions = {"Adopted", "Not Adopted"};
        JComboBox<String> adoptionCombo = new JComboBox<>(adoptionOptions);
        adoptionCombo.setSelectedItem(displayAdoptionStatus_Label.getText());

        // Create image preview label and a button to change the image.
        JLabel updateImageLabel = new JLabel();
        // Set the current image icon if available
        if (image != null && image instanceof ImageIcon) {
            updateImageLabel.setIcon((ImageIcon) image);
        } else {
            updateImageLabel.setText("No Image");
        }
        JButton changeImageButton = new JButton("Change Image");

        // Use a one-element array to hold the new image's Base64 string (to allow modification inside inner class)
        final String[] newImageBase64 = {""};
        // Optionally, if no new image is chosen, you'll use the current image Base64.

        // Add action listener to the "Change Image" button
        // This is inside your changeImageButton action listener in your update dialog:
        changeImageButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png"));
            if (fileChooser.showOpenDialog(updateDialog) == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                String selectedPath = selectedFile.getAbsolutePath();
                // Update the preview label with a scaled image icon
                ImageIcon newIcon = new ImageIcon(new ImageIcon(selectedPath).getImage()
                        .getScaledInstance(100, 100, Image.SCALE_SMOOTH));
                updateImageLabel.setIcon(newIcon);
                // Convert the new image to Base64
                try {
                    byte[] imageBytes = Files.readAllBytes(selectedFile.toPath());
                    newImageBase64[0] = Base64.getEncoder().encodeToString(imageBytes);
                    System.out.println("New image Base64 length: " + (newImageBase64[0] != null ? newImageBase64[0].length() : "null"));
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });


        // Layout components in the dialog
        gbc.gridx = 0; gbc.gridy = 0;
        updateDialog.add(new JLabel("ID:"), gbc);
        gbc.gridx = 1;
        updateDialog.add(idField, gbc);

        gbc.gridx = 0; gbc.gridy = 1;
        updateDialog.add(new JLabel("Breed:"), gbc);
        gbc.gridx = 1;
        updateDialog.add(breedField, gbc);

        gbc.gridx = 0; gbc.gridy = 2;
        updateDialog.add(new JLabel("Type:"), gbc);
        gbc.gridx = 1;
        updateDialog.add(typeField, gbc);

        gbc.gridx = 0; gbc.gridy = 3;
        updateDialog.add(new JLabel("Age:"), gbc);
        gbc.gridx = 1;
        updateDialog.add(ageField, gbc);

        gbc.gridx = 0; gbc.gridy = 4;
        updateDialog.add(new JLabel("Healthy Status:"), gbc);
        gbc.gridx = 1;
        updateDialog.add(healthCombo, gbc);

        gbc.gridx = 0; gbc.gridy = 5;
        updateDialog.add(new JLabel("Adoption Status:"), gbc);
        gbc.gridx = 1;
        updateDialog.add(adoptionCombo, gbc);

        // Image row
        gbc.gridx = 0; gbc.gridy = 6;
        updateDialog.add(new JLabel("Image:"), gbc);
        gbc.gridx = 1;
        updateDialog.add(updateImageLabel, gbc);

        // Change image button row
        gbc.gridx = 1; gbc.gridy = 7;
        updateDialog.add(changeImageButton, gbc);

        // Save and Cancel buttons
        JButton saveButton = new JButton("Save");
        JButton cancelButton = new JButton("Cancel");
        gbc.gridx = 0; gbc.gridy = 8;
        updateDialog.add(saveButton, gbc);
        gbc.gridx = 1; gbc.gridy = 8;
        updateDialog.add(cancelButton, gbc);

        saveButton.addActionListener(ae -> {
            String newId = idField.getText().trim();
            String newBreed = breedField.getText().trim();
            String newType = typeField.getText().trim();
            String newAge = ageField.getText().trim();
            String newHealthStatus = (String) healthCombo.getSelectedItem();
            String newAdoptionStatus = (String) adoptionCombo.getSelectedItem();

            // Determine image Base64
            String updatedImageBase64 = newImageBase64[0];
            if (updatedImageBase64 == null || updatedImageBase64.isEmpty()) {
                updatedImageBase64 = currentPetImageBase64; // fallback if no new image selected
            }

            System.out.println("Sending image Base64 length: " + (updatedImageBase64 != null ? updatedImageBase64.length() : "null"));

            try (Socket socket = new Socket(serverAddress, serverPort);
                 PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
                 BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {

                // Send update command
                writer.println("update-pet");
                Thread.sleep(50); // ensure transmission order

                // Send updated fields line-by-line
                writer.println(newId);
                writer.println(newBreed);
                writer.println(newType);
                writer.println(newAge);
                writer.println(newHealthStatus);
                writer.println(newAdoptionStatus);
                writer.println(updatedImageBase64);
                writer.flush();

                // Read the server response
                String response = reader.readLine();
                System.out.println("Server response: " + response);

                if (response != null && response.toLowerCase().contains("success")) {
                    JOptionPane.showMessageDialog(updateDialog, "Pet updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                    // Refresh displayed info
                    displayID_Label.setText(newId);
                    displayBreed_Label.setText(newBreed);
                    displayType_Label.setText(newType);
                    displayAge_Label.setText(newAge);
                    displayHealthyStatus_Label.setText(newHealthStatus);
                    displayAdoptionStatus_Label.setText(newAdoptionStatus);

                    // Refresh image from server
                    try (Socket imgSocket = new Socket(serverAddress, serverPort);
                         PrintWriter imgWriter = new PrintWriter(imgSocket.getOutputStream(), true);
                         BufferedReader imgReader = new BufferedReader(new InputStreamReader(imgSocket.getInputStream()))) {

                        imgWriter.println("pet-icon");
                        Thread.sleep(50);
                        imgWriter.println(newId);
                        imgWriter.flush();

                        String base64Image = imgReader.readLine();
                        if (base64Image != null && !"not-found".equalsIgnoreCase(base64Image)) {
                            byte[] imageBytes = Base64.getDecoder().decode(base64Image);
                            ImageIcon icon = new ImageIcon(imageBytes);
                            Image scaledImage = icon.getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH);
                            picture_Label.setIcon(new ImageIcon(scaledImage));
                        } else {
                            picture_Label.setIcon(null);
                        }
                    }

                    // Update stored variables
                    id = newId;
                    breed = newBreed;
                    type = newType;
                    age = newAge;
                    healthStatus = newHealthStatus;
                    adoptionStatus = newAdoptionStatus;

                    updateDialog.dispose();
                } else {
                    JOptionPane.showMessageDialog(updateDialog, "Error updating pet details.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (IOException | InterruptedException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(updateDialog, "Connection error while updating pet.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });




        // Cancel button closes the dialog without saving changes.
        cancelButton.addActionListener(ae -> updateDialog.dispose());

        updateDialog.setLocationRelativeTo(this);
        updateDialog.setVisible(true);
    }




    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_Pet_Profile_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_Pet_Profile_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_Pet_Profile_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_Pet_Profile_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_Pet_Profile_View(username, id, breed, type, age, healthStatus, adoptionStatus, image, serverAddress,serverPort).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel adoptionStatus_Label;
    private javax.swing.JLabel age_Label;
    private javax.swing.JLabel breed_Label;
    private javax.swing.JLabel displayAdoptionStatus_Label;
    private javax.swing.JLabel displayAge_Label;
    private javax.swing.JLabel displayBreed_Label;
    private javax.swing.JLabel displayHealthyStatus_Label;
    private javax.swing.JLabel displayID_Label;
    private javax.swing.JLabel displayType_Label;
    private javax.swing.JLabel healthyStatus_Label;
    private javax.swing.JLabel id_Label;
    private javax.swing.JButton updateButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel picture_Label;
    private javax.swing.JLabel type_Label;
    private javax.swing.JButton backButton;
    // End of variables declaration
}
