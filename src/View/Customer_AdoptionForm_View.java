package View;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.swing.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.Socket;

public class Customer_AdoptionForm_View extends javax.swing.JFrame {

    private static String serverAddress;
    private static int serverPort;
    private static String username;
    private static String id;
    private static String breed;
    private static String type;
    private static String age;
    private static String healthStatus;
    private static String adoptionStatus;
    private static Object image;
    private static String imageBase64;

    /**
     * Creates new form AdoptionForm_View
     */
    public Customer_AdoptionForm_View(String username, String id, String breed, String type, String age,
                                      String healthStatus, String adoptionStatus, Object image, String serverAddress,
                                      int serverPort) {
        // Assign parameters to instance variables
        this.username = username;
        this.id = id;
        this.breed = breed;
        this.type = type;
        this.age = age;
        this.healthStatus = healthStatus;
        this.adoptionStatus = adoptionStatus;
        this.image = image;
        this.serverAddress = serverAddress;
        this.serverPort = serverPort;

        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        backButton1 = new javax.swing.JButton();
        livingSituation = new javax.swing.JLabel();
        experienceWithPets = new javax.swing.JLabel();
        reasonForAdoption = new javax.swing.JLabel();

        // Create three JTextAreas for multi-line input (3 rows each)
        livingSituation_Field = new javax.swing.JTextArea();
        experienceWithPets_Field = new javax.swing.JTextArea();
        reasonForAdoption_Field = new javax.swing.JTextArea();

        // Set properties so they show 3 lines
        livingSituation_Field.setRows(7);
        livingSituation_Field.setColumns(20);
        experienceWithPets_Field.setRows(7);
        experienceWithPets_Field.setColumns(20);
        reasonForAdoption_Field.setRows(7);
        reasonForAdoption_Field.setColumns(20);
        submitButton = new javax.swing.JButton();
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);

            }
        });

        // Wrap each JTextArea in its own JScrollPane
        livingSituationScrollPane = new javax.swing.JScrollPane(livingSituation_Field);
        experienceWithPetsScrollPane = new javax.swing.JScrollPane(experienceWithPets_Field);
        reasonForAdoptionScrollPane = new javax.swing.JScrollPane(reasonForAdoption_Field);

        submitButton = new javax.swing.JButton(); // New submit button

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton1.setText("< Back");
        backButton1.addActionListener(evt -> backButtonActionPerformed(evt));

        livingSituation.setFont(new java.awt.Font("Gill Sans MT", 3, 12));
        livingSituation.setText("Living Situation :");

        experienceWithPets.setFont(new java.awt.Font("Gill Sans MT", 3, 12));
        experienceWithPets.setText("Experience: ");

        reasonForAdoption.setFont(new java.awt.Font("Gill Sans MT", 3, 12));
        reasonForAdoption.setText("Reason: ");

        submitButton.setText("Submit");
        submitButton.addActionListener(evt -> submitButtonActionPerformed(evt));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(backButton1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(33, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(livingSituation, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(experienceWithPets, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(reasonForAdoption, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(livingSituationScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                                        .addComponent(experienceWithPetsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                                        .addComponent(reasonForAdoptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
                                .addGap(35, 35, 35))
                        // Submit button row: center it horizontally
                        .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(backButton1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(livingSituation, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(livingSituationScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(experienceWithPets, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(experienceWithPetsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(reasonForAdoption, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(reasonForAdoptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(submitButton)
                                .addGap(37, 37, 37))
        );

        pack();
        // Link the scroll panes so they have the same width
        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
                livingSituationScrollPane, experienceWithPetsScrollPane, reasonForAdoptionScrollPane
        );
    }

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Retrieve the values from the three multi-line fields
        String living = livingSituation_Field.getText().trim();
        String experience = experienceWithPets_Field.getText().trim();
        String reason = reasonForAdoption_Field.getText().trim();

        // Optionally, validate that none are empty (add your own validation if needed)
        if (living.isEmpty() || experience.isEmpty() || reason.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Build an XML document representing the adoption form
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.newDocument();

            // Root element: AdoptionForm
            Element root = doc.createElement("AdoptionForm");
            doc.appendChild(root);

            // Add the username element (the submitter)
            Element userElem = doc.createElement("Username");
            userElem.setTextContent(username);
            root.appendChild(userElem);

            // Add PetID element (the pet that the user wants to adopt)
            Element petIDElem = doc.createElement("PetID");
            petIDElem.setTextContent(id);  // 'id' should contain the pet id
            root.appendChild(petIDElem);

            // Add a Status element with value "Pending"
            Element statusElem = doc.createElement("Status");
            statusElem.setTextContent("Pending");
            root.appendChild(statusElem);

            // Add living situation element
            Element livingElem = doc.createElement("LivingSituation");
            livingElem.setTextContent(living);
            root.appendChild(livingElem);

            // Add experience element
            Element experienceElem = doc.createElement("ExperienceWithPets");
            experienceElem.setTextContent(experience);
            root.appendChild(experienceElem);

            // Add reason element
            Element reasonElem = doc.createElement("ReasonForAdoption");
            reasonElem.setTextContent(reason);
            root.appendChild(reasonElem);

            // Convert the Document to a String (XML text)
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            StringWriter writer = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(writer));
            String xmlString = writer.toString();

            // Now, send the XML to the server using a socket.

            try (Socket socket = new Socket(serverAddress, serverPort);
                 PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
                 BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {

                // Send a command to indicate that an adoption form is being submitted.
                out.println("submitAdoptionForm");
                // Send the username (you may also include it in the XML, here it's both ways)
                out.println(username);
                // Send the XML string
                out.println(xmlString);
                // Send a termination marker to indicate the end of XML data
                out.println("EOF");

                // Read the server response
                String response = in.readLine();
                if (response != null && response.equalsIgnoreCase("SUCCESS")) {
                    JOptionPane.showMessageDialog(this, "Adoption form submitted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Error submitting adoption form.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error connecting to server.", "Connection Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error building XML.", "XML Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer_AdoptionForm_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer_AdoptionForm_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer_AdoptionForm_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer_AdoptionForm_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fol

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customer_AdoptionForm_View(username, id, breed, type, age, healthStatus, adoptionStatus, image, serverAddress, serverPort).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton backButton1;
    private javax.swing.JLabel livingSituation;
    private javax.swing.JLabel experienceWithPets;
    private javax.swing.JLabel reasonForAdoption;
    private javax.swing.JTextArea livingSituation_Field;
    private javax.swing.JTextArea experienceWithPets_Field;
    private javax.swing.JTextArea reasonForAdoption_Field;
    private javax.swing.JScrollPane livingSituationScrollPane;
    private javax.swing.JScrollPane experienceWithPetsScrollPane;
    private javax.swing.JScrollPane reasonForAdoptionScrollPane;
    private javax.swing.JButton submitButton;
// End of variables declaration

}
